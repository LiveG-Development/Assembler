/*
 * LiveG Assembler
 * 
 * Copyright (C) LiveG. All Rights Reserved.
 * Copying is not a victimless crime. Anyone caught copying LiveG software may
 * face sanctions.
 * 
 * https://liveg.tech
 * Licensed by the LiveG Open-Source Licence, which can be found at LICENCE.md.
 */

unsigned int registers[8];
unsigned int memory[6144];

bool running = true;

while (running) {
    unsigned int instruction = memory[registers[0]];
    unsigned int parameters[3] = [];

    for (unsigned int i = 5; i <= 7; i++) {
        parameters.append(registers[i]);
    }

    switch (instruction) {
        case 0x00:
            // halt

            running = false;
        case 0x01:
            // allocate

            for (unsigned int i = 0; i < parameters[1]; i++) {
                memory[parameters[0] + i] = 0;
            }
        case 0x02:
            // copy

            for (unsigned int i = 0; i < parameters[1]; i++) {
                memory[parameters[2] + i] = memory[parameters[0] + i];
            }
        case 0x03:
            // jump

            registers[0] = parameters[0];
        case 0x04:
            // write

            memory[parameters[1]] = parameters[0];
        case 0x05:
            // read

            registers[1] = memory[parameters[0]];
        case 0x06:
            // add

            registers[2] = parameters[0] + parameters[1];

            registers[3] = 0;
        case 0x07:
            // sub

            registers[2] = parameters[0] - parameters[1];

            if (registers[2] < 0) {
                registers[2] = 65536 + registers[2];
            }

            registers[3] = 0;
        case 0x08:
            // mul

            registers[2] = parameters[0] * parameters[1];

            registers[3] = 0;
        case 0x09:
            // div

            if (parameters[1] == 0) {
                registers[3] = 1;
            } else {
                registers[2] = integer(parameters[0] / parameters[1]);

                registers[3] = 0;
            }
        case 0x0A:
            // mod

            if (parameters[1] == 0) {
                registers[3] = 1;
            } else {
                registers[2] = parameters[0] % parameters[1];

                registers[3] = 0;
            }
        case 0x0B:
            // equ

            if (parameters[0] == parameters[1]) {
                registers[0] = parameters[2];
            } else {
                registers[0]++;
            }
        case 0x0C:
            // neq

            if (parameters[0] != parameters[1]) {
                registers[0] = parameters[2];
            } else {
                registers[0]++;
            }
        case 0x0D:
            // ltn

            if (parameters[0] < parameters[1]) {
                registers[0] = parameters[2];
            } else {
                registers[0]++;
            }
        case 0x0E:
            // gtn

            if (parameters[0] > parameters[1]) {
                registers[0] = parameters[2];
            } else {
                registers[0]++;
            }
        case 0x0F:
            // func

            registers[4] = registers[0];
            registers[0] = parameters[0];
        case 0x10:
            // ret

            registers[0] = registers[4];
            registers[4] = 0;
        case 0x14:
            // dwrite

            unsigned char byteA = (parameters[0] >> 8) & 0xFF;
            unsigned char byteB = parameters[0] & 0xFF;

            memory[parameters[1]] = byteA;
            memory[parameters[1] + 1] = byteB;
        case 0x15:
            // dread

            registers[1] = (memory[parameters[0]] * 256) + memory[parameters[0] + 1];
        case 0xA0:
            // outbin

            for (unsigned int i = 0; i < parameters[1]; i++) {
                tty.print(binary(memory[parameters[0] + i]));
            }
        case 0xA1:
            // outdec

            unsigned int result = 0;
            
            for (unsigned int i = 0; i < parameters[1]; i++) {
                result = (result * 256) + memory[parameters[0] + i];
            }

            tty.print(string(result));
        case 0xA2:
            // outhex

            for (unsigned int i = 0; i < parameters[1]; i++) {
                if (hexadecimal(memory[parameters[0] + i]).length < 1) {
                    tty.print("0" + hexadecimal(memory[parameters[0] + i]));
                } else {
                    tty.print(hexadecimal(memory[parameters[0] + i]));
                }
            }
        case 0xA3:
            // outasc
            
            for (unsigned int i = 0; i < parameters[1]; i++) {
                tty.print(ascii(memory[parameters[0] + i]));
            }
        case 0xFD:
            // (setpar)
            // Uses raw parameters only. Registers can't be used!

            registers[memory[registers[0] + 1] + 5] = (memory[registers[0] + 2] * 256) + memory[registers[0] + 3];
        case 0xFE:
            // (regpar)
            // Uses raw parameters only. Registers can't be used!

            registers[memory[registers[0] + 1] + 5] = registers[memory[registers[0] + 3]];
        case 0xFF:
            // (loadpar)
            // Uses raw parameters only. Registers can't be used!

            registers[memory[registers[0] + 1] + 5] = memory[(memory[registers[0] + 2] * 256) + memory[registers[0] + 3]];
    }

    if (instruction != 0x03 && instruction != 0x0B && instruction != 0x0C && instruction != 0x0D && instruction != 0x0E && instruction != 0x0F && instruction != 0x10) {
        // Only increase PC if jump instruction isn't used

        if (instruction == 0xFD || instruction == 0xFE || instruction == 0xFF) {
            // Jump by 4 in parameter instructions

            registers[0] += 4;
        } else {
            // Just jump by 1

            registers[0]++;
        }
    }
}