/*
 * LiveG Assembler
 * 
 * Copyright (C) LiveG. All Rights Reserved.
 * Copying is not a victimless crime. Anyone caught copying LiveG software may
 * face sanctions.
 * 
 * https://liveg.tech
 * Licensed by the LiveG Open-Source Licence, which can be found at LICENCE.md.
 */

unsigned int registers[20];
unsigned int memory[6144];

File file;
char* fileDirectory = "";

bool running = true;

while (running) {
    unsigned int instruction = memory[registers[0]];
    unsigned int parameters[3] = [];

    for (unsigned int i = 5; i <= 7; i++) {
        parameters.append(registers[i]);
    }

    switch (instruction) {
        case 0x00:
            // halt

            running = false;
        case 0x01:
            // allocate

            for (unsigned int i = 0; i < parameters[1]; i++) {
                memory[parameters[0] + i] = 0;
            }
        case 0x02:
            // copy

            for (unsigned int i = 0; i < parameters[1]; i++) {
                memory[parameters[2] + i] = memory[parameters[0] + i];
            }
        case 0x03:
            // jump

            registers[0] = parameters[0];
        case 0x04:
            // write

            memory[parameters[1]] = parameters[0];
        case 0x05:
            // read

            registers[1] = memory[parameters[0]];
        case 0x06:
            // add

            registers[2] = parameters[0] + parameters[1];

            registers[3] = 0;
        case 0x07:
            // sub

            registers[2] = parameters[0] - parameters[1];

            if (registers[2] < 0) {
                registers[2] = 65536 + registers[2];
            }

            registers[3] = 0;
        case 0x08:
            // mul

            registers[2] = parameters[0] * parameters[1];

            registers[3] = 0;
        case 0x09:
            // div

            if (parameters[1] == 0) {
                registers[3] = 1;
            } else {
                registers[2] = integer(parameters[0] / parameters[1]);

                registers[3] = 0;
            }
        case 0x0A:
            // mod

            if (parameters[1] == 0) {
                registers[3] = 1;
            } else {
                registers[2] = parameters[0] % parameters[1];

                registers[3] = 0;
            }
        case 0x0B:
            // equ

            if (parameters[0] == parameters[1]) {
                registers[0] = parameters[2];
            } else {
                registers[0]++;
            }
        case 0x0C:
            // neq

            if (parameters[0] != parameters[1]) {
                registers[0] = parameters[2];
            } else {
                registers[0]++;
            }
        case 0x0D:
            // ltn

            if (parameters[0] < parameters[1]) {
                registers[0] = parameters[2];
            } else {
                registers[0]++;
            }
        case 0x0E:
            // gtn

            if (parameters[0] > parameters[1]) {
                registers[0] = parameters[2];
            } else {
                registers[0]++;
            }
        case 0x0F:
            // func

            registers[4] = registers[0];
            registers[0] = parameters[0];
        case 0x10:
            // ret

            registers[0] = registers[4];
            registers[4] = 0;
        case 0x11:
            // sreg

            registers[parameters[0]] = parameters[1];
        case 0x12:
            // sgp

            registers[parameters[0] + 11] = parameters[1];
        case 0x13:
            // cgp

            for (unsigned int i = 12; i <= 19; i++) {
                registers[i] = 0;
            }
        case 0x14:
            // dwrite

            unsigned char byteA = (parameters[0] >> 8) & 0xFF;
            unsigned char byteB = parameters[0] & 0xFF;

            memory[parameters[1]] = byteA;
            memory[parameters[1] + 1] = byteB;
        case 0x15:
            // dread

            registers[1] = (memory[parameters[0]] * 256) + memory[parameters[0] + 1];
        case 0xA0:
            // outbin

            for (unsigned int i = 0; i < parameters[1]; i++) {
                tty.print(binary(memory[parameters[0] + i]));
            }
        case 0xA1:
            // outdec

            unsigned int result = 0;
            
            for (unsigned int i = 0; i < parameters[1]; i++) {
                result = (result * 256) + memory[parameters[0] + i];
            }

            tty.print(string(result));
        case 0xA2:
            // outhex

            for (unsigned int i = 0; i < parameters[1]; i++) {
                if (hexadecimal(memory[parameters[0] + i]).length < 1) {
                    tty.print("0" + hexadecimal(memory[parameters[0] + i]));
                } else {
                    tty.print(hexadecimal(memory[parameters[0] + i]));
                }
            }
        case 0xA3:
            // outasc
            
            for (unsigned int i = 0; i < parameters[1]; i++) {
                tty.print(ascii(memory[parameters[0] + i]));
            }
        case 0xA4:
            // in

            unsigned int index = 0;
            bool done = false;

            while (tty.available() > 0) {
                unsigned char lastChar;
                
                if (index < parameters[1] && !done) {
                    lastChar = tty.read();
                } else {
                    tty.read();
                }

                if (lastChar == "\n") {
                    done = true;
                } else {
                    memory[parameters[0] + index] = lastChar;
                }

                index++;
            }
        case 0xA5:
            // len

            unsigned int currentChar = 0;

            while (memory[parameters[0] + currentChar] != parameters[1]) {
                currentChar++;
            }

            registers[1] = currentChar;
        case 0xA6:
            // strnum

            unsigned int number = 0;
            bool error = false;

            for (unsigned int i = 0; i < parameters[1]; i++) {
                if (isDigit(ascii(memory[parameters[0] + i]))) {
                    number = (number * 10) + ascii(memory[parameters[0] + i]).toInt();
                } else {
                    error = true;
                }
            }

            registers[1] = number;
            
            registers[3] = error * 2;
        case 0xB0:
            // fopen

            fileDirectory = "";

            for (unsigned int i = 0; i < parameters[1]; i++) {
                fileDirectory += ascii(memory[parameters[0] + i]);
            }

            registers[3] = 0;
        case 0xB1:
            // fclose

            fileDirectory = "";
        case 0xB2:
            // fwrite

            if (fileDirectory != "") {
                FileManager.remove(fileDirectory);

                file = FileManager.open(fileDirectory, FILE_WRITE);
                
                for (unsigned int i = 0; i < parameters[1]; i++) {
                    file.write(ascii(memory[parameters[0] + i]));
                }
                
                file.close();
                
                registers[3] = 0;
            } else {
                registers[3] = 3;
            }
        case 0xB3:
            // fwriter

            if (fileDirectory != "") {
                file = FileManager.open(fileDirectory, FILE_WRITE);

                file.seek(parameters[2]);
                
                for (unsigned int i = 0; i < parameters[1]; i++) {
                    file.write(ascii(memory[parameters[0] + i]));
                }

                file.close();
                
                registers[3] = 0;
            } else {
                registers[3] = 3;
            }
        case 0xB4:
            // fappend

            if (fileDirectory != "") {
                file = FileManager.open(fileDirectory, FILE_WRITE);
                
                for (unsigned int i = 0; i < parameters[1]; i++) {
                    file.write(ascii(memory[parameters[0] + i]));
                }

                file.close();
                                
                registers[3] = 0;
            } else {
                registers[3] = 3;
            }
        case 0xB5:
            // fread

            if (fileDirectory != "") {
                file = FileManager.open(fileDirectory, FILE_READ);

                if (parameters[0] + parameters[1] <= 6144) {
                    for (unsigned int i = 0; i < parameters[1]; i++) {
                        char nextChar = file.read();

                        if (nextChar >= 0) {
                            memory[parameters[0] + i] = nextChar;
                        } else {
                            registers[3] = 4;
                        }
                    }

                    file.close();
                    
                    registers[3] = 0;
                } else {
                    registers[3] = 5;
                }
            } else {
                registers[3] = 3;
            }
        case 0xB6:
            // freadr

            if (fileDirectory != "") {
                file = FileManager.open(fileDirectory, FILE_READ);

                file.seek(parameters[2]);

                if (parameters[0] + parameters[1] <= 6144) {
                    for (unsigned int i = 0; i < parameters[1]; i++) {
                        char nextChar = file.read();

                        if (nextChar >= 0) {
                            memory[parameters[0] + i] = nextChar;
                        } else {
                            registers[3] = 4;
                        }
                    }

                    file.close();
                    
                    registers[3] = 0;
                } else {
                    registers[3] = 5;
                }
            } else {
                registers[3] = 3;
            }
        case 0xB7:
            // fsize

            if (fileDirectory != "") {
                file = FileManager.open(fileDirectory);
                
                registers[1] = file.size();

                file.close();
                                
                registers[3] = 0;
            } else {
                registers[3] = 3;
            }
        case 0xC0:
            // gpos

            registers[8] = parameters[0];
            registers[9] = parameters[1];
        case 0xC1:
            // gsize

            registers[10] = parameters[0];
            registers[11] = parameters[1];
        case 0xC2:
            // ginit

            registers[3] = integer(drawtools.ginit(registers[10], registers[11])) * 6;
        case 0xC3:
            // gfill

            registers[3] = integer(drawtools.gfill(parameters[0])) * 6;
        case 0xC4:
            // gpixel

            registers[3] = integer(drawtools.gpixel(registers[8], registers[9], parameters[0])) * 6;
        case 0xC5:
            // gline

            registers[3] = integer(drawtools.gline(registers[8], registers[9], registers[10], registers[11], parameters[0])) * 6;
        case 0xC6:
            // gfline

            registers[3] = integer(drawtools.gfline(registers[8], registers[9], registers[10], registers[11], parameters[1], parameters[0])) * 6;
        case 0xC7:
            // grect

            registers[3] = integer(drawtools.grect(registers[8], registers[9], registers[10], registers[11], parameters[0], parameters[1])) * 6;
        case 0xC8:
            // gcircle

            registers[3] = integer(drawtools.gcircle(registers[8], registers[9], registers[10], parameters[0], parameters[1])) * 6;
        case 0xC9:
            // gbin

            for (unsigned int i = 0; i < parameters[1]; i++) {
                for (unsigned int j = 0; j < binary(memory[parameters[2] + i]).length; j++) {
                    registers[3] = integer(drawtools.gchar(binary(memory[parameters[1] + i])[j], registers[8] + (j * registers[11] * 4), registers[9], registers[11], parameters[0])) * 6;
                }
            }
        case 0xCA:
            // gdec

            unsigned int result = 0;
            
            for (unsigned int i = 0; i < parameters[2]; i++) {
                result = (result * 256) + memory[parameters[1] + i];
            }

            for (unsigned int i = 0; i < string(result).length; i++) {
                registers[3] = integer(drawtools.gchar(string(result)[i], registers[8] + (i * registers[11] * 4), registers[9], registers[11], parameters[0])) * 6;
            }
        case 0xCB:
            // ghex

            for (unsigned int i = 0; i < parameters[2]; i++) {
                if (hexadecimal(memory[parameters[1] + i]).length < 2) {
                    registers[3] = integer(drawtools.gchar("0", registers[8], registers[9], registers[11], parameters[2])) * 6;
                    registers[3] = integer(drawtools.gchar(hexadecimal(memory[parameters[1] + i]), registers[8] + (registers[11] * 4), registers[9], registers[11], parameters[0])) * 6;
                } else {
                    registers[3] = integer(drawtools.gchar(hexadecimal(memory[parameters[1] + i])[0], registers[8], registers[9], registers[11], parameters[2])) * 6;
                    registers[3] = integer(drawtools.gchar(hexadecimal(memory[parameters[1] + i])[1], registers[8] + (registers[11] * 4), registers[9], registers[11], parameters[0])) * 6;
                }
            }
        case 0xCC:
            // gasc

            for (unsigned int i = 0; i < parameters[2]; i++) {
                registers[3] = integer(drawtools.gchar(ascii(memory[parameters[1] + i]), registers[8] + (i * registers[11] * 4), registers[9], registers[11], parameters[0])) * 6;
            }
        case 0xCD:
            // gbmp

            fileDirectory = "";

            for (unsigned int i = 0; i < parameters[1]; i++) {
                fileDirectory += ascii(memory[parameters[0] + i]);
            }

            registers[3] = integer(drawtools.gbmp(registers[8], registers[9], fileDirectory)) * 6;
        case 0xCE:
            // gtouch

            values = drawtools.gtouch(parameters[0] > 0);

            if (values == false) {
                registers[3] = 6;
            } else {
                registers[8] = values[0][0];
                registers[9] = values[0][1];
                registers[1] = values[1];

                registers[3] = 0;
            }
        case 0xFD:
            // (setpar)
            // Uses raw parameters only. Registers can't be used!

            registers[memory[registers[0] + 1] + 5] = (memory[registers[0] + 2] * 256) + memory[registers[0] + 3];
        case 0xFE:
            // (regpar)
            // Uses raw parameters only. Registers can't be used!

            registers[memory[registers[0] + 1] + 5] = registers[memory[registers[0] + 3]];
        case 0xFF:
            // (loadpar)
            // Uses raw parameters only. Registers can't be used!

            registers[memory[registers[0] + 1] + 5] = memory[(memory[registers[0] + 2] * 256) + memory[registers[0] + 3]];
    }

    if (instruction != 0x03 && instruction != 0x0B && instruction != 0x0C && instruction != 0x0D && instruction != 0x0E && instruction != 0x0F && instruction != 0x10) {
        // Only increase PC if jump instruction isn't used

        if (instruction == 0xFD || instruction == 0xFE || instruction == 0xFF) {
            // Jump by 4 in parameter instructions

            registers[0] += 4;
        } else {
            // Just jump by 1

            registers[0]++;
        }
    }
}