# LiveG Assembler
# 
# Copyright (C) LiveG. All Rights Reserved.
# Copying is not a victimless crime. Anyone caught copying LiveG software may
# face sanctions.
# 
# https://liveg.tech
# Licensed by the LiveG Open-Source Licence, which can be found at LICENCE.md.

import pygame

font = [
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00],
    [0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00, 0x00],
    [0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00],
    [0x00, 0x23, 0x13, 0x08, 0x64, 0x62, 0x00, 0x00],
    [0x00, 0x36, 0x49, 0x55, 0x22, 0x50, 0x00, 0x00],
    [0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x1C, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x41, 0x22, 0x1C, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00, 0x00],
    [0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00],
    [0x00, 0xA0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00],
    [0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00],
    [0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00],
    [0x00, 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00],
    [0x00, 0x62, 0x51, 0x49, 0x49, 0x46, 0x00, 0x00],
    [0x00, 0x22, 0x41, 0x49, 0x49, 0x36, 0x00, 0x00],
    [0x00, 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00],
    [0x00, 0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00],
    [0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00],
    [0x00, 0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00],
    [0x00, 0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00],
    [0x00, 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00],
    [0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0xAC, 0x6C, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00, 0x00],
    [0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00, 0x00],
    [0x00, 0x41, 0x22, 0x14, 0x08, 0x00, 0x00, 0x00],
    [0x00, 0x02, 0x01, 0x51, 0x09, 0x06, 0x00, 0x00],
    [0x00, 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00, 0x00],
    [0x00, 0x7E, 0x09, 0x09, 0x09, 0x7E, 0x00, 0x00],
    [0x00, 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00],
    [0x00, 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00],
    [0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00, 0x00],
    [0x00, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00],
    [0x00, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00],
    [0x00, 0x3E, 0x41, 0x41, 0x51, 0x72, 0x00, 0x00],
    [0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00],
    [0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00],
    [0x00, 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00],
    [0x00, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00],
    [0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00],
    [0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00],
    [0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00],
    [0x00, 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00],
    [0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00],
    [0x00, 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00],
    [0x00, 0x26, 0x49, 0x49, 0x49, 0x32, 0x00, 0x00],
    [0x00, 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00],
    [0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00],
    [0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, 0x00],
    [0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00, 0x00],
    [0x00, 0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00],
    [0x00, 0x03, 0x04, 0x78, 0x04, 0x03, 0x00, 0x00],
    [0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00],
    [0x00, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00],
    [0x00, 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x04, 0x02, 0x01, 0x02, 0x04, 0x00, 0x00],
    [0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00],
    [0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00],
    [0x00, 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00, 0x00],
    [0x00, 0x38, 0x44, 0x44, 0x28, 0x00, 0x00, 0x00],
    [0x00, 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00, 0x00],
    [0x00, 0x38, 0x54, 0x54, 0x54, 0x18, 0x00, 0x00],
    [0x00, 0x08, 0x7E, 0x09, 0x02, 0x00, 0x00, 0x00],
    [0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C, 0x00, 0x00],
    [0x00, 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00],
    [0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x80, 0x84, 0x7D, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00],
    [0x00, 0x41, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00],
    [0x00, 0x7C, 0x08, 0x04, 0x7C, 0x00, 0x00, 0x00],
    [0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00],
    [0x00, 0xFC, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00],
    [0x00, 0x18, 0x24, 0x24, 0xFC, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7C, 0x08, 0x04, 0x00, 0x00, 0x00],
    [0x00, 0x48, 0x54, 0x54, 0x24, 0x00, 0x00, 0x00],
    [0x00, 0x04, 0x7F, 0x44, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x3C, 0x40, 0x40, 0x7C, 0x00, 0x00, 0x00],
    [0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, 0x00],
    [0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, 0x00],
    [0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00],
    [0x00, 0x1C, 0xA0, 0xA0, 0x7C, 0x00, 0x00, 0x00],
    [0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00],
    [0x00, 0x08, 0x36, 0x41, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00],
    [0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00],
    [0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00]
]

pygame.init()

display = None

def hexrgb(value):
    binv = bin(value)[2:].zfill(16)

    r = int(int(binv[0:5], 2) * 8.225806451612904)
    g = int(int(binv[5:11], 2) * 4.0476190476190474)
    b = int(int(binv[11:16], 2) * 8.225806451612904)

    return (r, g, b)

def ginit(w, h):
    global display

    display = pygame.display.set_mode((w, h), 0, 32)

def gfill(colour):
    if display != None:
        display.fill(hexrgb(colour))
        pygame.display.update()

        return True
    else:
        return False

def gpixel(x, y, colour):
    if display != None:
        display.set_at((x, y), hexrgb(colour))
        pygame.display.update()

        return True
    else:
        return False

def gline(x, y, w, h, colour):
    if display != None:
        pygame.draw.line(display, hexrgb(colour), (x, y), (x + w, y + h))
        pygame.display.update()

        return True
    else:
        return False

def gfline(x, y, w, h, vertical, colour):
    if display != None:
        if vertical:
            pygame.draw.line(display, hexrgb(colour), (x, y), (x, y + h))
        else:
            pygame.draw.line(display, hexrgb(colour), (x, y), (x + w, y))

        pygame.display.update()

        return True
    else:
        return False

def grect(x, y, w, h, colour, borderSize):
    if display != None:
        pygame.draw.rect(display, hexrgb(colour), (x, y, w, h), borderSize)

        pygame.display.update()

        return True
    else:
        return False

def gcircle(x, y, w, colour, borderSize):
    if display != None:
        pygame.draw.circle(display, hexrgb(colour), (x, y), w, borderSize)

        pygame.display.update()

        return True
    else:
        return False

def gchar(char, x, y, h, colour):
    if display != None:
        if not (char >= 32 and char <= 127):
            char = ord("?")
        
        for i in range(0, 8):
            glyph = font[char - 0x20][i]

            for j in range(0, 8):
                if (glyph >> j) & 0x01:
                    grect((x + i) * h, (y + j) * h, h, h, colour, 0)
        
        return True
    else:
        return False

def gbmp(x, y, dir):
    if display != None:
        image = pygame.image.load(dir)

        display.blit(image, (0, 0))
        pygame.display.update()

        return True
    else:
        return False

def gtouch(wait):
    position = []
    down = False

    if display != None:
        if wait:
            touched = False

            while not touched:
                events = pygame.event.get()

                for event in events:
                    if event.type == pygame.MOUSEBUTTONUP:
                        position = pygame.mouse.get_pos()
                        down = True

                        touched = True
        else:
            pygame.event.get()
            
            position = pygame.mouse.get_pos()

            if pygame.mouse.get_pressed() != (False, False, False):
                down = True

        return (position, down)
    else:
        return False